{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ranga\\\\Documents\\\\Journal\\\\jornal\\\\src\\\\ActivityHeatmap.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActivityHeatmap = ({\n  data\n}) => {\n  _s();\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const getDaysInMonth = (month, year) => {\n    return new Date(year, month + 1, 0).getDate();\n  };\n  const generateHeatmapData = () => {\n    const year = new Date().getFullYear();\n    const daysInMonth = getDaysInMonth(selectedMonth, year);\n    const firstDay = new Date(year, selectedMonth, 1).getDay();\n    const weeks = [];\n    let currentWeek = Array(7).fill(null);\n    for (let i = 0; i < firstDay; i++) {\n      currentWeek[i] = {\n        date: null,\n        count: 0\n      };\n    }\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(year, selectedMonth, day);\n      const dateStr = date.toISOString().split('T')[0];\n      const count = data[dateStr] || 0;\n      const dayIndex = date.getDay();\n      currentWeek[dayIndex] = {\n        date: dateStr,\n        count\n      };\n      if (dayIndex === 6 || day === daysInMonth) {\n        weeks.push(currentWeek);\n        currentWeek = Array(7).fill(null);\n      }\n    }\n    if (currentWeek.some(day => day !== null)) {\n      weeks.push(currentWeek);\n    }\n    return weeks;\n  };\n  const getColor = count => {\n    if (!count) return '#ebedf0';\n    if (count === 1) return '#c6e48b';\n    if (count === 2) return '#7bc96f';\n    if (count === 3) return '#239a3b';\n    if (count >= 4) return '#196127';\n    return '#ebedf0';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"heatmap-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heatmap-month-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Month: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedMonth,\n        onChange: e => setSelectedMonth(parseInt(e.target.value)),\n        children: months.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: month\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activity-heatmap\",\n      children: [['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-label\",\n        children: day\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)), generateHeatmapData().map((week, weekIndex) => week.map((day, dayIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-day\",\n        style: {\n          backgroundColor: day ? getColor(day.count) : '#ebedf0'\n        },\n        children: day && day.date && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"heatmap-tooltip\",\n          children: [day.date, \": \", day.count, \" entries\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this)\n      }, `${weekIndex}-${dayIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ActivityHeatmap, \"K14An7rq4QSqcsK5GOLHi7u0iXU=\");\n_c = ActivityHeatmap;\nexport default ActivityHeatmap;\nvar _c;\n$RefreshReg$(_c, \"ActivityHeatmap\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ActivityHeatmap","data","_s","selectedMonth","setSelectedMonth","Date","getMonth","months","getDaysInMonth","month","year","getDate","generateHeatmapData","getFullYear","daysInMonth","firstDay","getDay","weeks","currentWeek","Array","fill","i","date","count","day","dateStr","toISOString","split","dayIndex","push","some","getColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","parseInt","target","map","index","week","weekIndex","style","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/Ranga/Documents/Journal/jornal/src/ActivityHeatmap.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Dashboard.css';\r\n\r\nconst ActivityHeatmap = ({ data }) => {\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());\r\n\r\n  const months = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n\r\n  const getDaysInMonth = (month, year) => {\r\n    return new Date(year, month + 1, 0).getDate();\r\n  };\r\n\r\n  const generateHeatmapData = () => {\r\n    const year = new Date().getFullYear();\r\n    const daysInMonth = getDaysInMonth(selectedMonth, year);\r\n    const firstDay = new Date(year, selectedMonth, 1).getDay();\r\n    const weeks = [];\r\n\r\n    let currentWeek = Array(7).fill(null);\r\n    for (let i = 0; i < firstDay; i++) {\r\n      currentWeek[i] = { date: null, count: 0 };\r\n    }\r\n\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      const date = new Date(year, selectedMonth, day);\r\n      const dateStr = date.toISOString().split('T')[0];\r\n      const count = data[dateStr] || 0;\r\n      const dayIndex = date.getDay();\r\n      currentWeek[dayIndex] = { date: dateStr, count };\r\n\r\n      if (dayIndex === 6 || day === daysInMonth) {\r\n        weeks.push(currentWeek);\r\n        currentWeek = Array(7).fill(null);\r\n      }\r\n    }\r\n\r\n    if (currentWeek.some(day => day !== null)) {\r\n      weeks.push(currentWeek);\r\n    }\r\n\r\n    return weeks;\r\n  };\r\n\r\n  const getColor = (count) => {\r\n    if (!count) return '#ebedf0';\r\n    if (count === 1) return '#c6e48b';\r\n    if (count === 2) return '#7bc96f';\r\n    if (count === 3) return '#239a3b';\r\n    if (count >= 4) return '#196127';\r\n    return '#ebedf0';\r\n  };\r\n\r\n  return (\r\n    <div className=\"heatmap-container\">\r\n      <div className=\"heatmap-month-selector\">\r\n        <label>Select Month: </label>\r\n        <select\r\n          value={selectedMonth}\r\n          onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n        >\r\n          {months.map((month, index) => (\r\n            <option key={index} value={index}>{month}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"activity-heatmap\">\r\n        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => (\r\n          <div key={index} className=\"heatmap-label\">{day}</div>\r\n        ))}\r\n        {generateHeatmapData().map((week, weekIndex) => (\r\n          week.map((day, dayIndex) => (\r\n            <div\r\n              key={`${weekIndex}-${dayIndex}`}\r\n              className=\"heatmap-day\"\r\n              style={{ backgroundColor: day ? getColor(day.count) : '#ebedf0' }}\r\n            >\r\n              {day && day.date && (\r\n                <div className=\"heatmap-tooltip\">\r\n                  {day.date}: {day.count} entries\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityHeatmap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}